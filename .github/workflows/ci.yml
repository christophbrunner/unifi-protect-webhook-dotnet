# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Continuous Integration (CI)

on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  push:
    branches:
      - 'main'       # Run the workflow when pushing to the main branch
  pull_request:
    branches:
      - '*'          # Run the workflow for all pull requests
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
  NUGET_AUTH_TOKEN: '%NUGET_AUTH_TOKEN%'

defaults:
  run:
    shell: pwsh

jobs:
  create_preview_nuget:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      env:
        NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: Add package-source (GitHub)
      run: dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - name: Pack UniFiApiProtectWebhookDotnet.Abstraction
      run: dotnet pack src/UniFiApiProtectWebhookDotnet.Abstraction/UniFiApiProtectWebhookDotnet.Abstraction.csproj -p:PackageVersion=1.0.0 --configuration Release --output '${{ env.NuGetDirectory }}'

    - name: Add package-source (local)
      run: dotnet nuget add source '${{ env.NuGetDirectory }}'

    - name: Pack UniFiApiProtectWebhookDotnet
      run: dotnet pack src/UniFiApiProtectWebhookDotnet/UniFiApiProtectWebhookDotnet.csproj -p:PackageVersion=1.0.1 --configuration Release --output '${{ env.NuGetDirectory }}'

    - name: Publish to GitHub packages 
      run: dotnet nuget push ${{ env.NuGetDirectory }}/*.nupkg -k ${{ secrets.GITHUB_TOKEN }} -s https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget_preview
        if-no-files-found: error
        retention-days: 3
        path: ${{ env.NuGetDirectory }}/*.nupkg

  create_nuget:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    - name: Add package-source (GitHub)
      run: dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

    - name: Pack UniFiApiProtectWebhookDotnet.Abstraction
      run: dotnet pack src/UniFiApiProtectWebhookDotnet.Abstraction/UniFiApiProtectWebhookDotnet.Abstraction.csproj -p:PackageVersion=${{ github.event.release.tag_name }} --configuration Release --output '${{ env.NuGetDirectory }}'

    - name: Add package-source (local)
      run: dotnet nuget add source '${{ env.NuGetDirectory }}'

    - name: Pack UniFiApiProtectWebhookDotnet.Abstraction
      run: dotnet pack src/UniFiApiProtectWebhookDotnet/UniFiApiProtectWebhookDotnet.csproj -p:PackageVersion=${{ github.event.release.tag_name }} --configuration Release --output '${{ env.NuGetDirectory }}'

    - name: Publish to GitHub packages 
      run: dotnet nuget push ${{ env.NuGetDirectory }}/*.nupkg -k ${{ secrets.GITHUB_TOKEN }} -s https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v4
      with:
        name: nuget_release
        if-no-files-found: error
        retention-days: 3
        path: ${{ env.NuGetDirectory }}/*${{ github.event.release.tag_name }}.nupkg       

  validate_nuget:
    runs-on: ubuntu-latest
    needs: [ create_preview_nuget ]
    steps:
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          pattern: nuget_*
          path: ${{ env.NuGetDirectory }}
          
      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      # Validate metadata and content of the NuGet package
      # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
      # If some rules are not applicable, you can disable them
      # using the --excluded-rules or --excluded-rule-ids option
      - name: Validate package
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*/*.nupkg")

  run_test:
    needs: [ create_preview_nuget ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x


    - name: Add package-source
      run: dotnet nuget add source --username ${{ github.repository_owner }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

    - name: Build
      run: dotnet build
        
    - name: Run tests
      run: dotnet test --collect "Code Coverage" -l html --results-directory:"TestResults"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: TestResults
        path: ./TestResults/*

  deploy:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate_nuget, run_test, create_nuget ]
    steps:
      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v4
        with:
          name: nuget_release
          path: ${{ env.NuGetDirectory }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
